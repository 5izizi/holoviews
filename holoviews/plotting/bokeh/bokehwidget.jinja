{% extends widget_template %}

{% block init_slider %}
{{ widget_name }}.prototype.init_slider = function(init_val){
    this.initialized = false;
    this.update_cache();
    this.update(0);
    if(this.cached) {
	var frame_len = Object.keys(this.keyMap).length;
	for (var frame=0; frame<frame_len; frame++) {
	    this.dynamic_update(frame);
	}
    } else {
	this.dynamic_update(0);
    }
    this.initialized = true;
}
{% endblock %}

{% block update %}
{{ widget_name }}.prototype.update = function(current){
    if (!(this.initialized) && current == 0) {
    	this.cache[current].show();
    } else if (this.initialized || !(self.cached)) {
    	var data = this.cache[current];
	data = JSON.parse(data.attr("data"));
    	$.each(data, function(id, value) {
    	    var ds = Bokeh.Collections(value.mode).get(id);
    	    if (ds != undefined) {
    		ds.set(value.data);
    	    }
    	});
    }
}
{% endblock %}

{% block dynamic_update %}
{{ widget_name }}.prototype.dynamic_update = function(current){
    function callback(initialized, msg){
	/* This callback receives data from Python as a string
	   in order to parse it correctly quotes are sliced off*/
	if (msg.msg_type == "execute_result") {
	    var data = msg.content.data['text/plain'].slice(1, -1);
	    this.cache[current] = $('<div />').appendTo("#" + this.img_id).attr("data", data).hide();
	    if (initialized) {
		this.update(current);
	    }
	}
    }
    if(!(current in this.cache) || !(this.initialized)) {
	var kernel = IPython.notebook.kernel;
	callbacks = {iopub: {output: $.proxy(callback, this, this.initialized)}};
	var cmd = "holoviews.plotting.widgets.NdWidget.widgets['" + this.id + "'].update(" + current + ")";
	kernel.execute("import holoviews;" + cmd, callbacks, {silent : false});
    } else {
	this.update(current);
    }
}
{% endblock %}
